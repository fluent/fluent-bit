/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: common.proto */

// #ifndef PROTOBUF_C_common_2eproto__INCLUDED
// #define PROTOBUF_C_common_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>
#include <opentelemetry/common.pb-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003003 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

typedef struct _Opentelemetry__Proto__Common__V1__InstrumentationScope Opentelemetry__Proto__Common__V1__InstrumentationScope;

/* --- enums --- */


/* --- messages --- */
 
/*
 * InstrumentationScope is a message representing the instrumentation scope information
 * such as the fully qualified name and version. 
 */
struct  _Opentelemetry__Proto__Common__V1__InstrumentationScope
{
  ProtobufCMessage base;
  /*
   * An empty instrumentation scope name means the name is unknown.
   */
  char *name;
  char *version;
  size_t n_attributes;
  Opentelemetry__Proto__Common__V1__KeyValue **attributes;
  uint32_t dropped_attributes_count;
};
#define OPENTELEMETRY__PROTO__COMMON__V1__INSTRUMENTATION_SCOPE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&opentelemetry__proto__common__v1__instrumentation_scope__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0,NULL, 0 }

/* Opentelemetry__Proto__Common__V1__InstrumentationScope methods */
void   opentelemetry__proto__common__v1__instrumentation_scope__init
                     (Opentelemetry__Proto__Common__V1__InstrumentationScope         *message);
size_t opentelemetry__proto__common__v1__instrumentation_scope__get_packed_size
                     (const Opentelemetry__Proto__Common__V1__InstrumentationScope   *message);
size_t opentelemetry__proto__common__v1__instrumentation_scope__pack
                     (const Opentelemetry__Proto__Common__V1__InstrumentationScope   *message,
                      uint8_t             *out);
size_t opentelemetry__proto__common__v1__instrumentation_scope__pack_to_buffer
                     (const Opentelemetry__Proto__Common__V1__InstrumentationScope   *message,
                      ProtobufCBuffer     *buffer);
Opentelemetry__Proto__Common__V1__InstrumentationScope *
       opentelemetry__proto__common__v1__instrumentation_scope__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   opentelemetry__proto__common__v1__instrumentation_scope__free_unpacked
                     (Opentelemetry__Proto__Common__V1__InstrumentationScope *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */
typedef void (*Opentelemetry__Proto__Common__V1__InstrumentationScope__Closure)
                     (const Opentelemetry__Proto__Common__V1__InstrumentationScope *message,
                      void *user_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor opentelemetry__proto__common__v1__instrumentation_scope__descriptor;

PROTOBUF_C__END_DECLS


// #endif  /* PROTOBUF_C_common_2eproto__INCLUDED */