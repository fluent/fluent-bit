---
name: Deploy to staging

on:
  push:
    tags:
      - '*'

  workflow_dispatch:
    inputs:
      version:
        description: Version of Fluent Bit to build
        required: true
        default: master
      target:
        description: Only build a specific target
        required: false
        default: ""

  # Run nightly build
  schedule:
  - cron: "0 6 * * *"

# We do not want a new staging build to run whilst we are releasing the current staging build.
# We also do not want multiples to run for the same version.
concurrency: staging-build-release

jobs:

  # This job copes with the variable approach of either being triggered by a tag,
  # where the data is then in the reference provided, or by a manual event where
  # the data is then in another structure entirely. We take the manual input if
  # it is present, otherwise we try to figure it out.
  staging-build-get-version:
    name: Get version to build
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.formatted_version.outputs.replaced }}
      date: ${{ steps.date.outputs.date }}
    steps:
      - name: Get the version
        id: get_version
        # Use the input variable if defined, if not attempt to get a tag
        run: |
            VERSION="${INPUT_VERSION}"
            if [ -z "${VERSION}" ]; then
              if [ -z "${GITHUB_REF/refs\/tags\//}" ]; then
                VERSION="${GITHUB_REF/refs\/tags\//}"
              else
                echo "Defaulting to master"
                VERSION=master
              fi
            fi
            echo ::set-output name=VERSION::$VERSION
        shell: bash
        env:
          INPUT_VERSION: ${{ github.event.inputs.version || '' }}

      - uses: frabert/replace-string-action@v2.0
        id: formatted_version
        with:
          pattern: '[v]*(.*)$'
          string: "${{ steps.get_version.outputs.VERSION }}"
          replace-with: '$1'
          flags: 'g'

      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date '+%Y-%m-%d-%H_%M_%S')"

  staging-build-images:
    needs: staging-build-get-version
    uses: fluent/fluent-bit/.github/workflows/call-build-images.yaml@master
    with:
      version: ${{ needs.staging-build-get-version.outputs.version }}
      registry: ghcr.io
      username: ${{ github.actor }}
      image: ${{ github.repository }}/staging
      environment: staging
      unstable: ${{ github.event_name == 'schedule' && needs.staging-build-get-version.outputs.date || '' }}
    secrets:
      token: ${{ secrets.GITHUB_TOKEN }}
      cosign_private_key: ${{ secrets.COSIGN_PRIVATE_KEY }}
      cosign_private_key_password: ${{ secrets.COSIGN_PASSWORD }}

  staging-build-generate-matrix:
    name: Staging build matrix
    runs-on: ubuntu-latest
    outputs:
      build-matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      # Set up the list of target to build so we can pass the JSON to the reusable job
      - id: set-matrix
        run: |
          matrix=$((
            echo '{ "distro" : ['
            echo '"amazonlinux/2", "amazonlinux/2.arm64v8",'
            echo '"centos/7", "centos/7.arm64v8", "centos/8", "centos/8.arm64v8",'
            echo '"debian/buster", "debian/buster.arm64v8", "debian/bullseye", "debian/bullseye.arm64v8",'
            echo '"ubuntu/16.04", "ubuntu/18.04", "ubuntu/20.04", "ubuntu/18.04.arm64v8", "ubuntu/20.04.arm64v8",'
            echo '"raspbian/buster", "raspbian/bullseye"'
            echo ']}'
          ) | jq -c .)
          if [ -n "${{ github.event.inputs.target || '' }}" ]; then
            echo "Overriding matrix to build: ${{ github.event.inputs.target }}"
            matrix=$((
              echo '{ "distro" : ['
              echo '"${{ github.event.inputs.target }}"'
              echo ']}'
            ) | jq -c .)
          fi
          echo $matrix
          echo $matrix| jq .
          echo "::set-output name=matrix::$matrix"
        shell: bash

  staging-build-packages:
    needs: [ staging-build-get-version, staging-build-generate-matrix ]
    uses: fluent/fluent-bit/.github/workflows/call-build-packages.yaml@master
    with:
      version: ${{ needs.staging-build-get-version.outputs.version }}
      build_matrix: ${{ needs.staging-build-generate-matrix.outputs.build-matrix }}
      environment: staging
      unstable: ${{ github.event_name == 'schedule' && needs.staging-build-get-version.outputs.date || '' }}
    secrets:
      token: ${{ secrets.GITHUB_TOKEN }}
      bucket: ${{ secrets.AWS_S3_BUCKET_STAGING }}
      access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
      gpg_private_key_passphrase: ${{ secrets.GPG_PRIVATE_KEY_PASSPHRASE }}

  # We already detain all artefacts as build output so just capture for an unstable release
  staging-unstable-release:
    runs-on: ubuntu-latest
    needs:
      - staging-build-get-version
      - staging-build-images
      - staging-build-packages
    environment: staging
    permissions:
      contents: write
    steps:
      - name: Download all artefacts
        continue-on-error: true
        uses: actions/download-artifact@v2
        with:
          path: artifacts/

      - name: Single packages tar
        run: |
          mkdir -p release-upload
          tar -czvf release-upload/packages-unstable-${{ needs.staging-build-get-version.outputs.version }}.tar.gz -C artifacts/ .
        shell: bash

      - name: Log in to the Container registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull containers as well (single arch only)
        # May not be any/valid so ignore errors
        continue-on-error: true
        run: |
          docker pull ghcr.io/${{ github.repository }}/staging:${{ needs.staging-build-get-version.outputs.version }}
          docker save --output container-${{ needs.staging-build-get-version.outputs.version }}.tar ghcr.io/${{ github.repository }}/staging:${{ needs.staging-build-get-version.outputs.version }}
          docker pull ghcr.io/${{ github.repository }}/staging:${{ needs.staging-build-get-version.outputs.version }}-debug
          docker save --output container-${{ needs.staging-build-get-version.outputs.version }}-debug.tar ghcr.io/${{ github.repository }}/staging:${{ needs.staging-build-get-version.outputs.version }}-debug
        shell: bash
        working-directory: release-upload

      - name: Display structure of files to upload
        run: ls -R
        working-directory: release-upload
        shell: bash

      - name: Unstable release on push to master to make it easier to download
        # Ignore failures here as we still want to trigger testing
        continue-on-error: true
        uses: pyTooling/Actions/releaser@r0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: 'unstable'
          files: |
            release-upload/**/*
