---
name: Deploy to staging

on:
  push:
    tags:
      - '*'
  release:
    types: [created]

  workflow_dispatch:
    inputs:
      ref:
        description: Branch, tag, or commit SHA to use
        required: true
        default: master

env:
  # Containers
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

  # Packages
  AWS_REGION: "us-east-1"
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET_STAGING }}
  # To use with Minio locally
  # AWS_S3_ENDPOINT: http://localhost:9000

jobs:
  deploy-staging-packages:
    name: Build all packages and deploy to staging
    runs-on: ubuntu-latest

    strategy:
      max-parallel: 48
      fail-fast: true
      matrix:
        distro: [ amazonlinux/2, amazonlinux/2.arm64v8, centos/7, centos/7.arm64v8, debian/jessie,
                  debian/jessie.arm64v8, debian/stretch, debian/stretch.arm64v8, debian/buster,
                  debian/buster.arm64v8, ubuntu/16.04, ubuntu/18.04, ubuntu/20.04, ubuntu/18.04.arm64v8,
                  ubuntu/20.04.arm64v8, raspbian/jessie, raspbian/stretch, raspbian/buster ]
        include:
          - distro: ubuntu/18.04
            target: ubuntu/bionic

          - distro: amazonlinux/2
            target: amazonlinux/2/

          - distro: amazonlinux/2.arm64v8
            target: amazonlinux/2/

          - distro: centos/7
            target: centos/7/

          - distro: centos/7.arm64v8
            target: centos/7/

          - distro: debian/jessie
            target: debian/jessie/

          - distro: debian/jessie.arm64v8
            target: debian/jessie/

          - distro: debian/stretch
            target: debian/stretch/

          - distro: debian/stretch.arm64v8
            target: debian/stretch/

          - distro: debian/buster
            target: debian/buster/

          - distro: debian/buster.arm64v8
            target: debian/buster/

          - distro: ubuntu/16.04
            target: ubuntu/xenial/

          - distro: ubuntu/18.04.arm64v8
            target: ubuntu/bionic/

          - distro: ubuntu/20.04
            target: ubuntu/focal/

          - distro: ubuntu/20.04.arm64v8
            target: ubuntu/focal/

          - distro: raspbian/jessie
            target: raspbian/jessie/

          - distro: raspbian/stretch
            target: raspbian/stretch/

          - distro: raspbian/buster
            target: raspbian/buster/
    steps:

    - name: Verify prerequisites
      run: |
        if [ -z "${target}" ]; then
          echo Missing target
          exit 1
        fi
      env:
        target: ${{ matrix.target }}

    - name: Checkout code
      uses: actions/checkout@v2

    - name: Get the version
      id: get_version
      # Use the input variable if defined, if not attempt to get a tag
      # Finally default it
      run: |
          VERSION="${INPUT_REF}"
          if [ -z "${VERSION}" ]; then
            if [ -z "${GITHUB_REF/refs\/tags\//}" ]; then
              VERSION="${GITHUB_REF/refs\/tags\//}"
            else
              VERSION=1.8.9
            fi
          fi
          echo ::set-output name=VERSION::$VERSION
      shell: bash

    - uses: frabert/replace-string-action@v2.0
      id: formatted_version
      with:
        pattern: '[v]*(.*)$'
        string: "${{ steps.get_version.outputs.VERSION }}"
        replace-with: '$1'
        flags: 'g'

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - uses: frabert/replace-string-action@master
      id: formatted_distro
      with:
        pattern: '(.*)\/(.*)$'
        string: "${{ matrix.distro }}"
        replace-with: '$1-$2'
        flags: 'g'

    - name: Build the distro artifacts
      run: |
        ./build.sh -v ${{ env.release }} -d ${{ env.distro }}
      env:
        release: ${{ steps.formatted_version.outputs.replaced }}
        distro: ${{ matrix.distro }}
        FLB_OUT_DIR: staging
      working-directory: packaging

    - name: Push packages to S3
      run: |
        if [ -n "${AWS_S3_ENDPOINT}" ]; then
          ENDPOINT="--endpoint-url ${AWS_S3_ENDPOINT}"
        fi
        aws s3 sync "${SOURCE_DIR}" "s3://${AWS_S3_BUCKET}/${DEST_DIR}" --acl public-read --follow-symlinks --delete --no-progress ${ENDPOINT}
      env:
        SOURCE_DIR: "packaging/packages/${{ matrix.distro }}/${{ steps.formatted_version.outputs.replaced }}/staging/"
        DEST_DIR: "/${{ steps.formatted_version.outputs.replaced }}/${{ matrix.target }}/"

  deploy-staging-images:
    name: build docker images
    strategy:
      max-parallel: 48
      fail-fast: true
      matrix:
        arch: [ amd64 ] #, arm64v8, arm32v7 ]
        suffix: [ x86_64 ] #, arm64v8, arm32v7, x86_64-debug ]
        os: [ linux ]
        # exclude:
        #   - {arch: amd64, suffix: arm64v8}
        #   - {arch: amd64, suffix: arm32v7}
        #   - {arch: arm64v8, suffix: x86_64}
        #   - {arch: arm64v8, suffix: arm32v7}
        #   - {arch: arm64v8, suffix: x86_64-debug}
        #   - {arch: arm32v7, suffix: x86_64}
        #   - {arch: arm32v7, suffix: arm64v8}
        #   - {arch: arm32v7, suffix: x86_64-debug}
    runs-on: [ ubuntu-latest ] #self-hosted, Linux, X64, packet-builder]
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Get the version
      id: get_version
      # Use the input variable if defined, if not attempt to get a tag
      # Finally default it
      run: |
          VERSION="${INPUT_REF}"
          if [ -z "${VERSION}" ]; then
            if [ -z "${GITHUB_REF/refs\/tags\//}" ]; then
              VERSION="${GITHUB_REF/refs\/tags\//}"
            else
              VERSION=1.8.9
            fi
          fi
          echo ::set-output name=VERSION::$VERSION
      shell: bash

    - uses: frabert/replace-string-action@v2.0
      id: formatted_version
      with:
        pattern: '[v]*(.*)$'
        string: "${{ steps.get_version.outputs.VERSION }}"
        replace-with: '$1'
        flags: 'g'

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Log in to the Container registry
      uses: docker/login-action@v1
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata from Github
      id: meta
      uses: docker/metadata-action@v3
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        flavor: |
          latest=false
        tags: |
          type=raw,${{ matrix.arch }}-${{ steps.formatted_version.outputs.replaced }}

    - name: Build the staging images
      uses: docker/build-push-action@v2
      with:
        file: ./dockerfiles/Dockerfile.${{ matrix.suffix }}
        context: .
        platforms: ${{ matrix.os }}/${{ matrix.arch }}
        push: true # Cannot push and load together
        load: false
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

    # TODO: trigger container tests