---
name: Reusable workflow to build container images

on:
  workflow_call:
    inputs:
      version:
        description: The version of Fluent Bit to create.
        type: string
        required: true
      ref:
        description: The commit, tag or branch of Fluent Bit to checkout for building that creates the version above.
        type: string
        required: true
      registry:
        description: The registry to push container images to.
        type: string
        required: true
      username:
        description: The username for the registry.
        type: string
        required: true
      image:
        description: The name of the container image to push to the registry.
        type: string
        required: true
      environment:
        description: The Github environment to run this workflow on.
        type: string
        required: false
      unstable:
        description: Optionally add metadata to build to indicate an unstable build, set to the contents you want to add.
        type: string
        required: false
        default: ''
    secrets:
      token:
        description: The Github token or similar to authenticate with for the registry.
        required: true
      cosign_private_key:
        description: The optional Cosign key to use for signing the images.
        required: false
      cosign_private_key_password:
        description: If the Cosign key requires a password then specify here, otherwise not required.
        required: false
jobs:
  call-build-images-meta:
    name: Extract any supporting metadata
    outputs:
      build-type: ${{ steps.determine-build-type.outputs.BUILD_TYPE }}
      major-version: ${{ steps.determine-major-version.outputs.replaced }}
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.ref }}

      # Determine if this is a 1.8 type of build which is different
      - name: Determine build type
        id: determine-build-type
        run: |
          BUILD_TYPE="1.8"
          if [[ -f "dockerfiles/Dockerfile" ]]; then
            BUILD_TYPE="modern"
          fi
          echo "Detected type: $BUILD_TYPE"
          echo ::set-output name=BUILD_TYPE::$BUILD_TYPE
        shell: bash

      # For main branch/releases we want to also tag with the major version.
      # E.g. if we build version 1.9.2 we want to tag with 1.9.2 and 1.9.
      - name: Determine major version tag
        id: determine-major-version
        uses: frabert/replace-string-action@v2.2
        with:
          pattern: '^(\d+\.\d+).*$'
          string: ${{ inputs.version }}
          replace-with: '$1'
          flags: 'g'

  # This takes a long time...
  call-build-windows-container:
    if: needs.call-build-images-meta.outputs.build-type != '1.8'
    name: Windows container image
    runs-on: windows-2019
    environment: ${{ inputs.environment }}
    needs:
      - call-build-images-meta
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.ref }}

      - name: 'Build:dockerimage'
        uses: docker/build-push-action@v3
        with:
          registry: ghcr.io
          username: ${{ inputs.username }}
          password: ${{ secrets.token }}
          repository: praizz/fluent-bit
          dockerfile: ./dockerfiles/Dockerfile.windows
          tags: ${{ inputs.registry }}/${{ inputs.image }}:windows-2019-${{ inputs.version }}

      # - name: Log in to the Container registry
      #   uses: docker/login-action@v2
      #   with:
      #     registry: ${{ inputs.registry }}
      #     username: ${{ inputs.username }}
      #     password: ${{ secrets.token }}


      # - name: Build the production images
      #   run: |
      #     docker build -t ${{ inputs.registry }}/${{ inputs.image }}:windows-2019-${{ inputs.version }} --build-arg WINDOWS_VERSION=ltsc2019 -f ./dockerfiles/Dockerfile.windows .
      #     docker push ${{ inputs.registry }}/${{ inputs.image }}:windows-2019-${{ inputs.version }}
      #   # We cannot use this action as it requires privileged mode
      #   # uses: docker/build-push-action@v3
      #   # with:
      #   #   file: ./dockerfiles/Dockerfile.windows
      #   #   context: .
      #   #   tags: ${{ steps.meta.outputs.tags }}
      #   #   labels: ${{ steps.meta.outputs.labels }}
      #   #   platforms: windows/amd64
      #   #   target: runtime
      #   #   push: true
      #   #   load: false
      #   #   build-args: |
      #   #     FLB_NIGHTLY_BUILD=${{ inputs.unstable }}
      #   #     WINDOWS_VERSION=ltsc2019
