---
name: Release from staging

# This is only expected to be invoked on-demand by a specific user.
on:
  workflow_dispatch:
    inputs:
      version:
        type: string
        description: The version we want to release from staging.
        required: true
      docker-image:
        type: string
        description: Optionally override the image name to push to on Docker Hub.
        default: fluent/fluent-bit
        required: false
      github-image:
        type: string
        description: Optionally override the image name to push to on Github Container Registry.
        default: fluent/fluent-bit
        required: false

# We do not want a new staging build to run whilst we are releasing the current staging build.
# We also do not want multiples to run for the same version.
concurrency: staging-build-release

jobs:

  staging-release-version-check:
    name: Check staging release matches
    environment: release
    runs-on: ubuntu-latest
    outputs:
      major-version: ${{ steps.get_major_version.outputs.value }}
    steps:
    - name: Get the version on staging
      run: |
        curl --fail -LO "$AWS_URL/latest-version.txt"
        cat latest-version.txt
        STAGING_VERSION=$(cat latest-version.txt)
        [[ "$STAGING_VERSION" != "$RELEASE_VERSION" ]] && echo "Latest version mismatch: $STAGING_VERSION != $RELEASE_VERSION" && exit 1
        # Must end in something that exits 0
        echo "Successfully confirmed version is as expected: $STAGING_VERSION"
      shell: bash
      env:
        AWS_URL: https://${{ secrets.AWS_S3_BUCKET_STAGING }}.s3.amazonaws.com
        RELEASE_VERSION: ${{ github.event.inputs.version }}

    # Get the major version, i.e. 1.9.3 --> 1.9, or just return the passed in version.
    - name: Convert to major version format
      id: get_major_version
      run: |
        MAJOR_VERSION="$RELEASE_VERSION"
        if [[ $RELEASE_VERSION =~ ^[0-9]+\.[0-9]+ ]]; then
          MAJOR_VERSION="${BASH_REMATCH[0]}"
        fi
        echo "::set-output name=value::$MAJOR_VERSION"
      shell: bash
      env:
        RELEASE_VERSION: ${{ github.event.inputs.version }}

  # 1. Take packages from the staging bucket
  # 2. Sign them with the release GPG key
  # 3. Also take existing release packages from the release bucket.
  # 4. Create a full repo configuration using the existing releases as well.
  # 5. Upload to release bucket.
  # Note we could resign all packages as well potentially if we wanted to update the key.
  staging-release-packages-s3:
    name: S3 - create release
    runs-on: ubuntu-18.04 # no createrepo on Ubuntu 20.04
    environment: release
    needs: staging-release-version-check
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup runner
      run: |
        sudo apt-get install debsigs createrepo aptly rsync
      shell: bash

    - name: Import GPG key for signing
      id: import_gpg
      uses: crazy-max/ghaction-import-gpg@v5
      with:
        gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
        passphrase: ${{ secrets.GPG_PRIVATE_KEY_PASSPHRASE }}

    # Download the current release bucket
    # Add everything from staging
    # Sign and set up metadata for it all
    # Upload to release bucket

    - name: Sync packages from buckets on S3
      run: |
        mkdir -p packaging/releases
        aws s3 sync "s3://${{ secrets.AWS_S3_BUCKET_RELEASE }}" packaging/releases/ --no-progress
        aws s3 sync "s3://${{ secrets.AWS_S3_BUCKET_STAGING }}" packaging/releases/ --no-progress
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      shell: bash

    - name: GPG set up keys for signing
      run: |
        gpg --export -a "${{ steps.import_gpg.outputs.name }}" > packaging/releases/fluentbit.key
        rpm --import packaging/releases/fluentbit.key
      shell: bash

    - name: Update repo info and remove any staging details
      run: |
        rm -f packaging/releases/*.repo
        rm -f packaging/releases/latest-version.txt
        packaging/update-repos.sh packaging/releases/
      env:
        GPG_KEY: ${{ steps.import_gpg.outputs.name }}
        AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET_RELEASE }}
        VERSION: ${{ github.event.inputs.version }}
      shell: bash

    - name: Sync to release bucket on S3
      run: |
        aws s3 sync packaging/releases/ "s3://${{ secrets.AWS_S3_BUCKET_RELEASE }}" --delete --follow-symlinks --no-progress
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      shell: bash

  # We have two options here:
  # 1. Sync the signed packages direct from the release bucket.
  # 2. Sync the staged packages from the staging bucket, resign on the server.
  #
  # Option 1 may involve more transfer fees as the release bucket grows but is
  # simpler plus tests the whole pipeline.
  # The assumption being we would remove this step eventually anyway.
  staging-release-packages-server:
    name: fluentbit.io - upload packages
    # Not required if using the staging bucket
    needs: staging-release-packages-s3
    runs-on: ubuntu-18.04 # failures with AWS client on latest
    environment: release
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - uses: ./.github/actions/release-server-sync
      with:
        bucket: ${{ secrets.AWS_S3_BUCKET_RELEASE }}
        access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        server_hostname: ${{ secrets.FLUENTBITIO_HOST }}
        server_username: ${{ secrets.FLUENTBITIO_USERNAME }}
        server_key: ${{ secrets.FLUENTBITIO_SSHKEY }}
        server_aptly_config: ${{ secrets.FLUENTBITIO_APTLY_CONFIG }}

  # Simple skopeo copy jobs to transfer image from staging to release registry with optional GPG key signing.
  # Unfortunately skopeo currently does not support Cosign: https://github.com/containers/skopeo/issues/1533
  staging-release-images:
    name: Release ${{ matrix.tag }} container images
    runs-on: ubuntu-latest
    needs:
      - staging-release-version-check
    environment: release
    env:
      STAGING_IMAGE_NAME: ghcr.io/${{ github.repository }}/staging
    strategy:
      fail-fast: false
      matrix:
        # All the explicit tags we want to release
        tag: [
          "${{ github.event.inputs.version }}",
          "${{ needs.staging-release-version-check.outputs.major-version }}",
          "latest",
          "${{ github.event.inputs.version }}-debug",
          "${{ needs.staging-release-version-check.outputs.major-version }}-debug",
          "latest-debug"
        ]
    steps:
      # Primarily because the skopeo errors are hard to parse and non-obvious
      - name: Check the image exists
        run: |
          docker pull "$STAGING_IMAGE_NAME:$TAG"
        env:
          TAG: ${{ matrix.tag }}
        shell: bash

      # Use the container to prevent any rootless issues and we do not need to use GPG signing as DockerHub does not support it.
      - name: Promote container images from staging to Dockerhub
        run: |
          docker run --rm  \
            quay.io/skopeo/stable:latest \
            copy \
              --all \
              --retry-times 10 \
              --src-no-creds \
              --dest-creds "$RELEASE_CREDS" \
              "docker://$STAGING_IMAGE_NAME:$TAG" \
              "docker://$RELEASE_IMAGE_NAME:$TAG"
        env:
          RELEASE_IMAGE_NAME: docker.io/${{ github.event.inputs.docker-image || secrets.DOCKERHUB_ORGANIZATION }}
          RELEASE_CREDS: ${{ secrets.DOCKERHUB_USERNAME }}:${{ secrets.DOCKERHUB_TOKEN }}
          TAG: ${{ matrix.tag }}
        shell: bash

      - name: Promote container images from staging to GHCR.io
        run: |
          docker run --rm  \
            quay.io/skopeo/stable:latest \
            copy \
              --all \
              --retry-times 10 \
              --src-no-creds \
              --dest-creds "$RELEASE_CREDS" \
              "docker://$STAGING_IMAGE_NAME:$TAG" \
              "docker://$RELEASE_IMAGE_NAME:$TAG"
        env:
          RELEASE_IMAGE_NAME: ghcr.io/${{ github.event.inputs.github-image || github.repository }}
          RELEASE_CREDS: ${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}
          TAG: ${{ matrix.tag }}
        shell: bash

  staging-release-images-sign:
    name: Sign container image manifests
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write
    runs-on: ubuntu-latest
    environment: release
    needs: staging-release-images
    env:
      DH_RELEASE_IMAGE_NAME: docker.io/${{ github.event.inputs.docker-image || secrets.DOCKERHUB_ORGANIZATION }}
      GHCR_RELEASE_IMAGE_NAME: ghcr.io/${{ github.event.inputs.github-image || github.repository }}
    steps:
      - name: Install cosign
        uses: sigstore/cosign-installer@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Cosign with a key
        # Only run if we have a key defined
        if: ${{ env.COSIGN_PRIVATE_KEY }}
        # The key needs to cope with newlines
        run: |
          echo -e "${COSIGN_PRIVATE_KEY}" > /tmp/my_cosign.key
          cosign sign --key /tmp/my_cosign.key --recursive \
            -a "repo=${{ github.repository }}" \
            -a "workflow=${{ github.workflow }}" \
            -a "release=${{ github.event.inputs.version }}" \
            "$GHCR_RELEASE_IMAGE_NAME:${{ github.event.inputs.version }}" \
            "$GHCR_RELEASE_IMAGE_NAME:${{ github.event.inputs.version }}-debug" \
            "$GHCR_RELEASE_IMAGE_NAME:latest" \
            "$GHCR_RELEASE_IMAGE_NAME:latest-debug" \
            "$DH_RELEASE_IMAGE_NAME:${{ github.event.inputs.version }}" \
            "$DH_RELEASE_IMAGE_NAME:${{ github.event.inputs.version }}-debug" \
            "$DH_RELEASE_IMAGE_NAME:latest" \
            "$DH_RELEASE_IMAGE_NAME:latest-debug"
          rm -f /tmp/my_cosign.key
        shell: bash
        env:
          COSIGN_PRIVATE_KEY: ${{ secrets.cosign_private_key }}
          COSIGN_PASSWORD: ${{ secrets.cosign_private_key_password }} # optional

      - name: Cosign keyless signing using Rektor public transparency log
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance, and records it to the
        # sigstore community Rekor transparency log.
        #
        # We use recursive signing on the manifest to cover all the images.
        run: |
          cosign sign --recursive \
            -a "repo=${{ github.repository }}" \
            -a "workflow=${{ github.workflow }}" \
            -a "release=${{ github.event.inputs.version }}" \
            "$GHCR_RELEASE_IMAGE_NAME:${{ github.event.inputs.version }}" \
            "$GHCR_RELEASE_IMAGE_NAME:${{ github.event.inputs.version }}-debug" \
            "$GHCR_RELEASE_IMAGE_NAME:latest" \
            "$GHCR_RELEASE_IMAGE_NAME:latest-debug" \
            "$DH_RELEASE_IMAGE_NAME:${{ github.event.inputs.version }}" \
            "$DH_RELEASE_IMAGE_NAME:${{ github.event.inputs.version }}-debug" \
            "$DH_RELEASE_IMAGE_NAME:latest" \
            "$DH_RELEASE_IMAGE_NAME:latest-debug"
        shell: bash
        env:
          COSIGN_EXPERIMENTAL: "true"

  # This will require a sign off so can be done after packages are updated to confirm
  # Until S3 bucket is set up as release will only test what is in the server from a prior release.
  # TODO: https://github.com/fluent/fluent-bit/issues/5098
  staging-release-smoke-test:
    name: Run smoke tests on release artefacts
    permissions:
      contents: read
    runs-on: ubuntu-latest
    environment: release
    needs:
      - staging-release-packages-server
      - staging-release-images
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Test release packages
        run: |
          ./packaging/test-release-packages.sh
        shell: bash

      - name: Test containers
        run: |
          ./packaging/testing/smoke/container/container-smoke-test.sh
        shell: bash
        env:
          IMAGE_TAG: ${{ github.event.inputs.version }}
