---
name: Release from staging

# This is only expected to be invoked on-demand by a specific user.
on:
  workflow_dispatch:
    inputs:
      version:
        type: string
        description: The version we want to release from staging.
        required: true
jobs:

  # 1. Take packages from the staging bucket
  # 2. Sign them with the release GPG key
  # 3. Also take existing release packages from the release bucket.
  # 4. Create a full repo configuration using the existing releases as well.
  # 5. Upload to release bucket.
  # Note we could resign all packages as well potentially if we wanted to update the key.
  staging-release-packages-s3:
    name: S3 - create release
    runs-on: ubuntu-18.04 # no createrepo on Ubuntu 20.04
    environment: release
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup runner
      run: |
        sudo apt-get install debsigs createrepo aptly rsync
      shell: bash

    - name: Import GPG key for signing
      id: import_gpg
      uses: crazy-max/ghaction-import-gpg@v4
      with:
        gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}

    # Download the current release bucket
    # Add everything from staging
    # Sign and set up metadata for it all
    # Upload to release bucket

    - name: Sync packages from buckets on S3
      run: |
        mkdir -p packaging/releases
        aws s3 sync "s3://${{ secrets.AWS_S3_BUCKET_RELEASE }}" packaging/releases/ --no-progress
        aws s3 sync "s3://${{ secrets.AWS_S3_BUCKET_STAGING }}" packaging/releases/ --no-progress
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      shell: bash

    - name: GPG set up keys for signing
      run: |
        gpg --export -a "${{ steps.import_gpg.outputs.name }}" > packaging/releases/fluentbit.key
        rpm --import packaging/releases/fluentbit.key
      shell: bash

    - name: Update repo info and remove any staging details
      run: |
        rm -f packaging/releases/*.repo
        LATEST_VERSION=$(cat packaging/releases/latest-version.txt)
        if [[ "$LATEST_VERSION" != "$VERSION" ]];
          echo "$LATEST_VERSION != $VERSION"
        fi
        packaging/update-repos.sh "$VERSION" packaging/releases/
        rm -f packaging/releases/latest-version.txt
      env:
        GPG_KEY: ${{ steps.import_gpg.outputs.name }}
        AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET_RELEASE }}
        VERSION: ${{ inputs.version }}
      shell: bash

    - name: Sync to release bucket on S3
      run: |
        aws s3 sync packaging/releases/ "s3://${{ secrets.AWS_S3_BUCKET_RELEASE }}" --delete --follow-symlinks --no-progress
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      shell: bash

  # We have two options here:
  # 1. Sync the signed packages direct from the release bucket.
  # 2. Sync the staged packages from the staging bucket, resign on the server.
  #
  # Option 1 may involve more transfer fees as the release bucket grows but is
  # simpler plus tests the whole pipeline.
  # The assumption being we would remove this step eventually anyway.
  staging-release-packages-server:
    name: fluentbit.io - upload packages
    # Not required if using the staging bucket
    needs: staging-release-packages-s3
    runs-on: ubuntu-18.04 # failures with AWS client on latest
    environment: release
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - uses: ./.github/actions/release-server-sync
      with:
        bucket: ${{ secrets.AWS_S3_BUCKET_RELEASE }}
        access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        server_hostname: ${{ secrets.FLUENTBITIO_HOST }}
        server_username: ${{ secrets.FLUENTBITIO_USERNAME }}
        server_key: ${{ secrets.FLUENTBITIO_SSHKEY }}

  # Simple skopeo copy jobs to transfer image from staging to release registry with optional GPG key signing.
  # Unfortunately skopeo currently does not support Cosign: https://github.com/containers/skopeo/issues/1533
  staging-release-images:
    runs-on: ubuntu-latest
    environment: release
    strategy:
      fail-fast: false
      matrix:
        # All the release registries we support and the tags we want to release
        release-image: [ "docker.io/${{ secrets.DOCKERHUB_ORGANIZATION }}", "ghcr.io/${{ github.repository }}" ]
        tag: [ "${{ inputs.version }}", "latest", "${{ inputs.version }}-debug", "latest-debug" ]

        # Attach credentials to each registry
        include:
          - release-image: "docker.io/${{ secrets.DOCKERHUB_ORGANIZATION }}"
            release-creds: "${{ secrets.DOCKERHUB_USERNAME }}:${{ secrets.DOCKERHUB_TOKEN }}"

          - release-image: "ghcr.io/${{ github.repository }}"
            release-creds: "${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}"
    steps:
      - name: Promote container images from staging to release if no GPG key
        if: ${{ ! secrets.GPG_PRIVATE_KEY }}
        run: |
          skopeo \
              copy \
              --all \
              --src-no-creds \
              --dest-creds "$RELEASE_CREDS" \
              "docker://$STAGING_IMAGE_NAME:$TAG" \
              "docker://$RELEASE_IMAGE_NAME:$TAG"
        env:
          STAGING_IMAGE_NAME: ghcr.io/${{ github.repository }}/staging
          RELEASE_IMAGE_NAME: ${{ matrix.release-image }}
          RELEASE_CREDS: ${{ matrix.release-creds }}
          VERSION: ${{ inputs.version }}
          TAG: ${{ matrix.tag }}
        shell: bash

      - name: Import GPG key for signing
        if: ${{ secrets.GPG_PRIVATE_KEY }}
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v4
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}

      - name: Promote and sign container images from staging to release
        if: ${{ secrets.GPG_PRIVATE_KEY }}
        run: |
          skopeo \
              copy \
              --all --remove-signatures \
              --sign-by "$GPG_KEY" \
              --src-no-creds \
              --dest-creds "$RELEASE_CREDS" \
              "docker://$STAGING_IMAGE_NAME:$TAG" \
              "docker://$RELEASE_IMAGE_NAME:$TAG"
        env:
          STAGING_IMAGE_NAME: ghcr.io/${{ github.repository }}/staging
          RELEASE_IMAGE_NAME: ${{ matrix.release-image }}
          RELEASE_CREDS: ${{ matrix.release-creds }}
          GPG_KEY: ${{ steps.import_gpg.outputs.name }}
          VERSION: ${{ inputs.version }}
          TAG: ${{ matrix.tag }}
        shell: bash
