/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: metrics_service.proto */

#ifndef PROTOBUF_C_metrics_5fservice_2eproto__INCLUDED
#define PROTOBUF_C_metrics_5fservice_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003003 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "metrics.pb-c.h"

typedef struct _Opentelemetry__Proto__Collector__Metrics__V1__ExportMetricsServiceRequest Opentelemetry__Proto__Collector__Metrics__V1__ExportMetricsServiceRequest;
typedef struct _Opentelemetry__Proto__Collector__Metrics__V1__ExportMetricsServiceResponse Opentelemetry__Proto__Collector__Metrics__V1__ExportMetricsServiceResponse;


/* --- enums --- */


/* --- messages --- */

struct  _Opentelemetry__Proto__Collector__Metrics__V1__ExportMetricsServiceRequest
{
  ProtobufCMessage base;
  /*
   * An array of ResourceMetrics.
   * For data coming from a single resource this array will typically contain one
   * element. Intermediary nodes (such as OpenTelemetry Collector) that receive
   * data from multiple origins typically batch the data before forwarding further and
   * in that case this array will contain multiple elements.
   */
  size_t n_resource_metrics;
  Opentelemetry__Proto__Metrics__V1__ResourceMetrics **resource_metrics;
};
#define OPENTELEMETRY__PROTO__COLLECTOR__METRICS__V1__EXPORT_METRICS_SERVICE_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&opentelemetry__proto__collector__metrics__v1__export_metrics_service_request__descriptor) \
    , 0,NULL }


struct  _Opentelemetry__Proto__Collector__Metrics__V1__ExportMetricsServiceResponse
{
  ProtobufCMessage base;
};
#define OPENTELEMETRY__PROTO__COLLECTOR__METRICS__V1__EXPORT_METRICS_SERVICE_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&opentelemetry__proto__collector__metrics__v1__export_metrics_service_response__descriptor) \
     }


/* Opentelemetry__Proto__Collector__Metrics__V1__ExportMetricsServiceRequest methods */
void   opentelemetry__proto__collector__metrics__v1__export_metrics_service_request__init
                     (Opentelemetry__Proto__Collector__Metrics__V1__ExportMetricsServiceRequest         *message);
size_t opentelemetry__proto__collector__metrics__v1__export_metrics_service_request__get_packed_size
                     (const Opentelemetry__Proto__Collector__Metrics__V1__ExportMetricsServiceRequest   *message);
size_t opentelemetry__proto__collector__metrics__v1__export_metrics_service_request__pack
                     (const Opentelemetry__Proto__Collector__Metrics__V1__ExportMetricsServiceRequest   *message,
                      uint8_t             *out);
size_t opentelemetry__proto__collector__metrics__v1__export_metrics_service_request__pack_to_buffer
                     (const Opentelemetry__Proto__Collector__Metrics__V1__ExportMetricsServiceRequest   *message,
                      ProtobufCBuffer     *buffer);
Opentelemetry__Proto__Collector__Metrics__V1__ExportMetricsServiceRequest *
       opentelemetry__proto__collector__metrics__v1__export_metrics_service_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   opentelemetry__proto__collector__metrics__v1__export_metrics_service_request__free_unpacked
                     (Opentelemetry__Proto__Collector__Metrics__V1__ExportMetricsServiceRequest *message,
                      ProtobufCAllocator *allocator);
/* Opentelemetry__Proto__Collector__Metrics__V1__ExportMetricsServiceResponse methods */
void   opentelemetry__proto__collector__metrics__v1__export_metrics_service_response__init
                     (Opentelemetry__Proto__Collector__Metrics__V1__ExportMetricsServiceResponse         *message);
size_t opentelemetry__proto__collector__metrics__v1__export_metrics_service_response__get_packed_size
                     (const Opentelemetry__Proto__Collector__Metrics__V1__ExportMetricsServiceResponse   *message);
size_t opentelemetry__proto__collector__metrics__v1__export_metrics_service_response__pack
                     (const Opentelemetry__Proto__Collector__Metrics__V1__ExportMetricsServiceResponse   *message,
                      uint8_t             *out);
size_t opentelemetry__proto__collector__metrics__v1__export_metrics_service_response__pack_to_buffer
                     (const Opentelemetry__Proto__Collector__Metrics__V1__ExportMetricsServiceResponse   *message,
                      ProtobufCBuffer     *buffer);
Opentelemetry__Proto__Collector__Metrics__V1__ExportMetricsServiceResponse *
       opentelemetry__proto__collector__metrics__v1__export_metrics_service_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   opentelemetry__proto__collector__metrics__v1__export_metrics_service_response__free_unpacked
                     (Opentelemetry__Proto__Collector__Metrics__V1__ExportMetricsServiceResponse *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Opentelemetry__Proto__Collector__Metrics__V1__ExportMetricsServiceRequest_Closure)
                 (const Opentelemetry__Proto__Collector__Metrics__V1__ExportMetricsServiceRequest *message,
                  void *closure_data);
typedef void (*Opentelemetry__Proto__Collector__Metrics__V1__ExportMetricsServiceResponse_Closure)
                 (const Opentelemetry__Proto__Collector__Metrics__V1__ExportMetricsServiceResponse *message,
                  void *closure_data);

/* --- services --- */

typedef struct _Opentelemetry__Proto__Collector__Metrics__V1__MetricsService_Service Opentelemetry__Proto__Collector__Metrics__V1__MetricsService_Service;
struct _Opentelemetry__Proto__Collector__Metrics__V1__MetricsService_Service
{
  ProtobufCService base;
  void (*export)(Opentelemetry__Proto__Collector__Metrics__V1__MetricsService_Service *service,
                 const Opentelemetry__Proto__Collector__Metrics__V1__ExportMetricsServiceRequest *input,
                 Opentelemetry__Proto__Collector__Metrics__V1__ExportMetricsServiceResponse_Closure closure,
                 void *closure_data);
};
typedef void (*Opentelemetry__Proto__Collector__Metrics__V1__MetricsService_ServiceDestroy)(Opentelemetry__Proto__Collector__Metrics__V1__MetricsService_Service *);
void opentelemetry__proto__collector__metrics__v1__metrics_service__init (Opentelemetry__Proto__Collector__Metrics__V1__MetricsService_Service *service,
                                                                          Opentelemetry__Proto__Collector__Metrics__V1__MetricsService_ServiceDestroy destroy);
#define OPENTELEMETRY__PROTO__COLLECTOR__METRICS__V1__METRICS_SERVICE__BASE_INIT \
    { &opentelemetry__proto__collector__metrics__v1__metrics_service__descriptor, protobuf_c_service_invoke_internal, NULL }
#define OPENTELEMETRY__PROTO__COLLECTOR__METRICS__V1__METRICS_SERVICE__INIT(function_prefix__) \
    { OPENTELEMETRY__PROTO__COLLECTOR__METRICS__V1__METRICS_SERVICE__BASE_INIT,\
      function_prefix__ ## export  }
void opentelemetry__proto__collector__metrics__v1__metrics_service__export(ProtobufCService *service,
                                                                           const Opentelemetry__Proto__Collector__Metrics__V1__ExportMetricsServiceRequest *input,
                                                                           Opentelemetry__Proto__Collector__Metrics__V1__ExportMetricsServiceResponse_Closure closure,
                                                                           void *closure_data);

/* --- descriptors --- */

extern const ProtobufCMessageDescriptor opentelemetry__proto__collector__metrics__v1__export_metrics_service_request__descriptor;
extern const ProtobufCMessageDescriptor opentelemetry__proto__collector__metrics__v1__export_metrics_service_response__descriptor;
extern const ProtobufCServiceDescriptor opentelemetry__proto__collector__metrics__v1__metrics_service__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_metrics_5fservice_2eproto__INCLUDED */
