# Copyright (C) 2019 Intel Corporation.  All rights reserved.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

name: compilation on macos

on:
  # will be triggered on PR events
  pull_request:
    types:
      - opened
      - synchronize
    paths:
      - ".github/workflows/build_llvm_libraries.yml"
      - ".github/workflows/compilation_on_macos.yml"
      - "build-scripts/**"
      - "core/**"
      - "!core/deps/**"
      - "product-mini/**"
      - "samples/**"
      - "!samples/workload/**"
      - "tests/wamr-test-suites/**"
      - "wamr-compiler/**"
  # will be triggered on push events
  push:
    branches:
      - main
      - "dev/**"
    paths:
      - ".github/workflows/build_llvm_libraries.yml"
      - ".github/workflows/compilation_on_macos.yml"
      - "build-scripts/**"
      - "core/**"
      - "!core/deps/**"
      - "product-mini/**"
      - "samples/**"
      - "!samples/workload/**"
      - "tests/wamr-test-suites/**"
      - "wamr-compiler/**"
  # allow to be triggered manually
  workflow_dispatch:

# Cancel any in-flight jobs for the same PR/branch so there's only one active
# at a time
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  # For BUILD
  AOT_BUILD_OPTIONS: "           -DWAMR_BUILD_AOT=1 -DWAMR_BUILD_FAST_INTERP=0 -DWAMR_BUILD_INTERP=0 -DWAMR_BUILD_FAST_JIT=0 -DWAMR_BUILD_JIT=0 -DWAMR_BUILD_LAZY_JIT=0"
  CLASSIC_INTERP_BUILD_OPTIONS: "-DWAMR_BUILD_AOT=0 -DWAMR_BUILD_FAST_INTERP=0 -DWAMR_BUILD_INTERP=1 -DWAMR_BUILD_FAST_JIT=0 -DWAMR_BUILD_JIT=0 -DWAMR_BUILD_LAZY_JIT=0"
  FAST_INTERP_BUILD_OPTIONS: "   -DWAMR_BUILD_AOT=0 -DWAMR_BUILD_FAST_INTERP=1 -DWAMR_BUILD_INTERP=1 -DWAMR_BUILD_FAST_JIT=0 -DWAMR_BUILD_JIT=0 -DWAMR_BUILD_LAZY_JIT=0"
  FAST_JIT_BUILD_OPTIONS: "      -DWAMR_BUILD_AOT=1 -DWAMR_BUILD_FAST_INTERP=0 -DWAMR_BUILD_INTERP=0 -DWAMR_BUILD_FAST_JIT=1 -DWAMR_BUILD_JIT=0 -DWAMR_BUILD_LAZY_JIT=0"
  LLVM_LAZY_JIT_BUILD_OPTIONS: " -DWAMR_BUILD_AOT=1 -DWAMR_BUILD_FAST_INTERP=0 -DWAMR_BUILD_INTERP=0 -DWAMR_BUILD_FAST_JIT=0 -DWAMR_BUILD_JIT=1 -DWAMR_BUILD_LAZY_JIT=1"
  LLVM_EAGER_JIT_BUILD_OPTIONS: "-DWAMR_BUILD_AOT=1 -DWAMR_BUILD_FAST_INTERP=0 -DWAMR_BUILD_INTERP=0 -DWAMR_BUILD_FAST_JIT=0 -DWAMR_BUILD_JIT=1 -DWAMR_BUILD_LAZY_JIT=0"
  MULTI_TIER_JIT_BUILD_OPTIONS: "-DWAMR_BUILD_AOT=1 -DWAMR_BUILD_FAST_INTERP=0 -DWAMR_BUILD_INTERP=1 -DWAMR_BUILD_FAST_JIT=1 -DWAMR_BUILD_JIT=1 -DWAMR_BUILD_LAZY_JIT=1"

permissions:
  contents: read

jobs:
  build_llvm_libraries_on_intel_macos:
    permissions:
      contents: read
      actions: write
    uses: ./.github/workflows/build_llvm_libraries.yml
    with:
      os: "macos-13"
      arch: "X86"
  build_llvm_libraries_on_arm_macos:
    permissions:
      contents: read
      actions: write
    uses: ./.github/workflows/build_llvm_libraries.yml
    with:
      os: "macos-14"
      arch: "AArch64 ARM"

  build_wamrc:
    needs: [build_llvm_libraries_on_intel_macos]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-13
            llvm_cache_key: ${{ needs.build_llvm_libraries_on_intel_macos.outputs.cache_key }}
    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: Get LLVM libraries
        id: retrieve_llvm_libs
        uses: actions/cache@v4
        with:
          path: |
            ./core/deps/llvm/build/bin
            ./core/deps/llvm/build/include
            ./core/deps/llvm/build/lib
            ./core/deps/llvm/build/libexec
            ./core/deps/llvm/build/share
          key: ${{ matrix.llvm_cache_key }}

      - name: Quit if cache miss
        if: steps.retrieve_llvm_libs.outputs.cache-hit != 'true'
        run: echo "::error::can not get prebuilt llvm libraries" && exit 1

      - name: Build wamrc
        run: |
          mkdir build && cd build
          cmake ..
          cmake --build . --config Release --parallel 4
        working-directory: wamr-compiler

  build_iwasm:
    needs: [build_llvm_libraries_on_intel_macos]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        make_options_run_mode: [
            # Running mode
            $AOT_BUILD_OPTIONS,
            $CLASSIC_INTERP_BUILD_OPTIONS,
            $FAST_INTERP_BUILD_OPTIONS,
            $LLVM_LAZY_JIT_BUILD_OPTIONS,
            $LLVM_EAGER_JIT_BUILD_OPTIONS,
          ]
        make_options_feature: [
            # Features
            "-DWAMR_BUILD_CUSTOM_NAME_SECTION=1",
            # doesn't support
            #"-DWAMR_BUILD_DEBUG_AOT=1",
            "-DWAMR_BUILD_DEBUG_INTERP=1",
            "-DWAMR_BUILD_DUMP_CALL_STACK=1",
            "-DWAMR_BUILD_LIB_PTHREAD=1",
            "-DWAMR_BUILD_LIB_WASI_THREADS=1",
            "-DWAMR_BUILD_LOAD_CUSTOM_SECTION=1",
            "-DWAMR_BUILD_MINI_LOADER=1",
            "-DWAMR_BUILD_MEMORY_PROFILING=1",
            "-DWAMR_BUILD_MULTI_MODULE=1",
            "-DWAMR_BUILD_PERF_PROFILING=1",
            "-DWAMR_BUILD_REF_TYPES=1",
            "-DWAMR_BUILD_SIMD=1",
            "-DWAMR_BUILD_TAIL_CALL=1",
            "-DWAMR_DISABLE_HW_BOUND_CHECK=1",
            "-DWAMR_BUILD_EXTENDED_CONST_EXPR=1",
          ]
        os: [macos-13]
        platform: [darwin]
        exclude:
          # incompatible feature and platform
          # incompatible mode and feature
          # MULTI_MODULE only on INTERP mode and AOT mode
          - make_options_run_mode: $LLVM_LAZY_JIT_BUILD_OPTIONS
            make_options_feature: "-DWAMR_BUILD_MULTI_MODULE=1"
          - make_options_run_mode: $LLVM_EAGER_JIT_BUILD_OPTIONS
            make_options_feature: "-DWAMR_BUILD_MULTI_MODULE=1"
          # SIMD only on JIT/AOT mode
          - make_options_run_mode: $CLASSIC_INTERP_BUILD_OPTIONS
            make_options_feature: "-DWAMR_BUILD_SIMD=1"
          - make_options_run_mode: $FAST_INTERP_BUILD_OPTIONS
            make_options_feature: "-DWAMR_BUILD_SIMD=1"
          # DEBUG_INTERP only on CLASSIC INTERP mode
          - make_options_run_mode: $AOT_BUILD_OPTIONS
            make_options_feature: "-DWAMR_BUILD_DEBUG_INTERP=1"
          - make_options_run_mode: $LLVM_LAZY_JIT_BUILD_OPTIONS
            make_options_feature: "-DWAMR_BUILD_DEBUG_INTERP=1"
          - make_options_run_mode: $LLVM_EAGER_JIT_BUILD_OPTIONS
            make_options_feature: "-DWAMR_BUILD_DEBUG_INTERP=1"
          - make_options_run_mode: $FAST_INTERP_BUILD_OPTIONS
            make_options_feature: "-DWAMR_BUILD_DEBUG_INTERP=1"
          # DEBUG_AOT only on JIT/AOT mode
          - make_options_run_mode: $CLASSIC_INTERP_BUILD_OPTIONS
            make_options_feature: "-DWAMR_BUILD_DEBUG_AOT=1"
          - make_options_run_mode: $FAST_INTERP_BUILD_OPTIONS
            make_options_feature: "-DWAMR_BUILD_DEBUG_AOT=1"
          # TODO: DEBUG_AOT on JIT
          - make_options_run_mode: $LLVM_LAZY_JIT_BUILD_OPTIONS
            make_options_feature: "-DWAMR_BUILD_DEBUG_AOT=1"
          - make_options_run_mode: $LLVM_EAGER_JIT_BUILD_OPTIONS
            make_options_feature: "-DWAMR_BUILD_DEBUG_AOT=1"
          # MINI_LOADER only on INTERP mode
          - make_options_run_mode: $AOT_BUILD_OPTIONS
            make_options_feature: "-DWAMR_BUILD_MINI_LOADER=1"
          - make_options_run_mode: $LLVM_LAZY_JIT_BUILD_OPTIONS
            make_options_feature: "-DWAMR_BUILD_MINI_LOADER=1"
          - make_options_run_mode: $LLVM_EAGER_JIT_BUILD_OPTIONS
            make_options_feature: "-DWAMR_BUILD_MINI_LOADER=1"
        include:
          - os: macos-13
            llvm_cache_key: ${{ needs.build_llvm_libraries_on_intel_macos.outputs.cache_key }}
    steps:
      - name: checkout
        uses: actions/checkout@v4

      # only download llvm cache when needed
      - name: Get LLVM libraries
        id: retrieve_llvm_libs
        if: endsWith(matrix.make_options_run_mode, '_JIT_BUILD_OPTIONS')
        uses: actions/cache@v4
        with:
          path: |
            ./core/deps/llvm/build/bin
            ./core/deps/llvm/build/include
            ./core/deps/llvm/build/lib
            ./core/deps/llvm/build/libexec
            ./core/deps/llvm/build/share
          key: ${{ matrix.llvm_cache_key }}

      - name: Quit if cache miss
        if: endsWith(matrix.make_options_run_mode, '_JIT_BUILD_OPTIONS') && (steps.retrieve_llvm_libs.outputs.cache-hit != 'true')
        run: echo "::error::can not get prebuilt llvm libraries" && exit 1

      - name: Build iwasm
        run: |
          mkdir build && cd build
          cmake .. ${{ matrix.make_options_run_mode }} ${{ matrix.make_options_feature }}
          cmake --build . --config Release --parallel 4
        working-directory: product-mini/platforms/${{ matrix.platform }}

  build_samples_wasm_c_api:
    needs:
      [
        build_iwasm,
        build_llvm_libraries_on_intel_macos,
        build_wamrc,
      ]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        make_options: [
            $AOT_BUILD_OPTIONS,
            $CLASSIC_INTERP_BUILD_OPTIONS,
            $FAST_INTERP_BUILD_OPTIONS,
            $FAST_JIT_BUILD_OPTIONS,
            $LLVM_LAZY_JIT_BUILD_OPTIONS,
            $LLVM_EAGER_JIT_BUILD_OPTIONS,
            $MULTI_TIER_JIT_BUILD_OPTIONS,
          ]
        os: [macos-13]
        include:
          - os: macos-13
            llvm_cache_key: ${{ needs.build_llvm_libraries_on_intel_macos.outputs.cache_key }}

    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: Get LLVM libraries
        id: retrieve_llvm_libs
        if: (!endsWith(matrix.make_options, '_INTERP_BUILD_OPTIONS'))
        uses: actions/cache@v4
        with:
          path: |
            ./core/deps/llvm/build/bin
            ./core/deps/llvm/build/include
            ./core/deps/llvm/build/lib
            ./core/deps/llvm/build/libexec
            ./core/deps/llvm/build/share
          key: ${{ matrix.llvm_cache_key }}

      - name: Quit if cache miss
        if: (!endsWith(matrix.make_options, '_INTERP_BUILD_OPTIONS')) && (steps.retrieve_llvm_libs.outputs.cache-hit != 'true')
        run: echo "::error::can not get prebuilt llvm libraries" && exit 1

      - name: install-wasi-sdk-wabt
        uses: ./.github/actions/install-wasi-sdk-wabt
        with:
          os: ${{ matrix.os }}

      - name: Build wamrc
        if: (!endsWith(matrix.make_options, '_INTERP_BUILD_OPTIONS'))
        run: |
          mkdir build && cd build
          cmake ..
          cmake --build . --config Release --parallel 4
        working-directory: wamr-compiler

      - name: Build Sample [wasm-c-api]
        run: |
          VERBOSE=1
          cmake -S . -B build ${{ matrix.make_options }}
          cmake --build build --config Debug --parallel 4
          ctest --test-dir build --output-on-failure
        working-directory: samples/wasm-c-api

      - name: Build Sample [printversion]
        run: |
          ./test.sh
        working-directory: samples/printversion

  build_samples_others:
    needs: [build_iwasm, build_wamrc, build_llvm_libraries_on_intel_macos, build_llvm_libraries_on_arm_macos]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-13, macos-14]
        include:
          - os: macos-13
            llvm_cache_key: ${{ needs.build_llvm_libraries_on_intel_macos.outputs.cache_key }}
          - os: macos-14
            llvm_cache_key: ${{ needs.build_llvm_libraries_on_arm_macos.outputs.cache_key }}
    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: install-wasi-sdk-wabt
        uses: ./.github/actions/install-wasi-sdk-wabt
        with:
          os: ${{ matrix.os }}

      - name: Build Sample [basic]
        run: |
          cd samples/basic
          ./build.sh
          ./run.sh

      - name: Build Sample [file]
        run: |
          cd samples/file
          mkdir build && cd build
          cmake ..
          cmake --build . --config Debug --parallel 4
          ./src/iwasm -f wasm-app/file.wasm -d .

      - name: Build Sample [multi-thread]
        run: |
          cd samples/multi-thread
          mkdir build && cd build
          cmake ..
          cmake --build . --config Debug --parallel 4
          ./iwasm wasm-apps/test.wasm

      - name: Build Sample [multi-module]
        run: |
          cd samples/multi-module
          mkdir build && cd build
          cmake ..
          cmake --build . --config Debug --parallel 4
          ./multi_module mC.wasm

      - name: Build Sample [spawn-thread]
        run: |
          cd samples/spawn-thread
          mkdir build && cd build
          cmake ..
          cmake --build . --config Debug --parallel 4
          ./spawn_thread

      - name: Build Sample [ref-types]
        run: |
          cd samples/ref-types
          mkdir build && cd build
          cmake ..
          cmake --build . --config Debug --parallel 4
          ./hello

      - name: Get LLVM libraries
        id: retrieve_llvm_libs
        uses: actions/cache@v4
        with:
          path: |
            ./core/deps/llvm/build/bin
            ./core/deps/llvm/build/include
            ./core/deps/llvm/build/lib
            ./core/deps/llvm/build/libexec
            ./core/deps/llvm/build/share
          key: ${{ matrix.llvm_cache_key }}

      - name: Build wamrc
        run: |
          mkdir build && cd build
          cmake ..
          cmake --build . --config Release --parallel 4
        working-directory: wamr-compiler

      # cmake --build . --config Debug --parallel 4
      - name: Build Sample [wasi-threads]
        run: |
          cd samples/wasi-threads
          mkdir build && cd build
          cmake ..
          cmake --build . --config Debug --verbose
          ./iwasm wasm-apps/no_pthread.wasm

          ../../../wamr-compiler/build/wamrc --size-level=0 --enable-multi-thread -o wasm-apps/no_pthread.aot wasm-apps/no_pthread.wasm
          ./iwasm wasm-apps/no_pthread.aot

      - name: Build Sample [shared-module]
        run: |
          cd samples/shared-module
          ./build.sh
          ./run.sh

      - name: Build Sample [terminate]
        run: |
          cd samples/terminate
          ./build.sh
          ./run.sh

      - name: Build Sample [debug-tools]
        run: |
          cd samples/debug-tools
          mkdir build && cd build
          cmake ..
          cmake --build . --config Debug --parallel 4
          ./iwasm wasm-apps/trap.wasm | grep "#" > call_stack.txt
          ./iwasm wasm-apps/trap.aot | grep "#" > call_stack_aot.txt
          bash -x ../symbolicate.sh

      - name: Build Sample [native-stack-overflow]
        run: |
          cd samples/native-stack-overflow
          ./build.sh
          ./run.sh test1
          ./run.sh test2

      - name: Build Sample [shared-heap]
        run: |
          cd samples/shared-heap
          mkdir build && cd build
          cmake ..
          cmake --build . --config Debug --parallel 4
          ./shared_heap_test
          ./shared_heap_test --aot
